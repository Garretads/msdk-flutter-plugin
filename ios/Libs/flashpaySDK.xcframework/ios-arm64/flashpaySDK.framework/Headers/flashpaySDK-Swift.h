#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
#ifndef FLASHPAYSDK_SWIFT_H
#define FLASHPAYSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="flashpaySDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

@class NSString;
enum AdditionalFieldType : NSInteger;

SWIFT_CLASS("_TtC11flashpaySDK15AdditionalField")
@interface AdditionalField : NSObject
@property (nonatomic, copy) NSString * _Nonnull value;
/// \param type Type of additional field, one of AdditionalFieldType
///
/// \param value Known value of the field
///
- (nonnull instancetype)initWithType:(enum AdditionalFieldType)type value:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithCustomName:(NSString * _Nonnull)customName value:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


typedef SWIFT_ENUM(NSInteger, AdditionalFieldType, open) {
  customer_first_name SWIFT_COMPILE_NAME("customer_first_name") = 0,
  customer_middle_name SWIFT_COMPILE_NAME("customer_middle_name") = 1,
  customer_last_name SWIFT_COMPILE_NAME("customer_last_name") = 2,
  customer_phone SWIFT_COMPILE_NAME("customer_phone") = 3,
  customer_email SWIFT_COMPILE_NAME("customer_email") = 4,
  customer_country SWIFT_COMPILE_NAME("customer_country") = 5,
  customer_state SWIFT_COMPILE_NAME("customer_state") = 6,
  customer_city SWIFT_COMPILE_NAME("customer_city") = 7,
  customer_address SWIFT_COMPILE_NAME("customer_address") = 8,
  customer_zip SWIFT_COMPILE_NAME("customer_zip") = 9,
  customer_day_of_birth SWIFT_COMPILE_NAME("customer_day_of_birth") = 10,
  customer_birthplace SWIFT_COMPILE_NAME("customer_birthplace") = 11,
  customer_ssn SWIFT_COMPILE_NAME("customer_ssn") = 12,
  customer_domain SWIFT_COMPILE_NAME("customer_domain") = 13,
  customer_mir SWIFT_COMPILE_NAME("customer_mir") = 14,
  customer_account_id SWIFT_COMPILE_NAME("customer_account_id") = 15,
  customer_language SWIFT_COMPILE_NAME("customer_language") = 16,
  customer_screen_res SWIFT_COMPILE_NAME("customer_screen_res") = 17,
  customer_save SWIFT_COMPILE_NAME("customer_save") = 18,
  billing_postal SWIFT_COMPILE_NAME("billing_postal") = 19,
  billing_country SWIFT_COMPILE_NAME("billing_country") = 20,
  billing_region SWIFT_COMPILE_NAME("billing_region") = 21,
  billing_city SWIFT_COMPILE_NAME("billing_city") = 22,
  billing_address SWIFT_COMPILE_NAME("billing_address") = 23,
  identify_doc_number SWIFT_COMPILE_NAME("identify_doc_number") = 24,
  identify_doc_type SWIFT_COMPILE_NAME("identify_doc_type") = 25,
  identify_doc_issue_date SWIFT_COMPILE_NAME("identify_doc_issue_date") = 26,
  identify_doc_issue_by SWIFT_COMPILE_NAME("identify_doc_issue_by") = 27,
  custom SWIFT_COMPILE_NAME("custom") = 28,
  doku_customer_first_name SWIFT_COMPILE_NAME("doku_customer_first_name") = 29,
  doku_customer_email SWIFT_COMPILE_NAME("doku_customer_email") = 30,
  neteller_account_number SWIFT_COMPILE_NAME("neteller_account_number") = 31,
  qiwi_account_number SWIFT_COMPILE_NAME("qiwi_account_number") = 32,
  webmoney_classic_account_number SWIFT_COMPILE_NAME("webmoney_classic_account_number") = 33,
  webmoney_classic_account_type SWIFT_COMPILE_NAME("webmoney_classic_account_type") = 34,
};





@class UIViewController;
@class PaymentOptions;
@class PaymentResult;

SWIFT_CLASS("_TtC11flashpaySDK11FlashpaySDK")
@interface FlashpaySDK : NSObject
/// The key is used to get error-code from UserInfo of NSError instance returned while mobile SDK session initialisation
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kSDKInitErrorCodeKey;)
+ (NSString * _Nonnull)kSDKInitErrorCodeKey SWIFT_WARN_UNUSED_RESULT;
/// Version of currently installed Flashpay SDK
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull buildNumber;)
+ (NSString * _Nonnull)buildNumber SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sdkVersion;)
+ (NSString * _Nonnull)sdkVersion SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull coreVerion;)
+ (NSString * _Nonnull)coreVerion SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull apiHost;)
+ (NSString * _Nonnull)apiHost SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull socketHost;)
+ (NSString * _Nonnull)socketHost SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Presents UI to begin payment flow
/// \param viewController controller from what you would like to present payment UI
///
/// \param paymentOptions info that is needed to perform payment (merchant_id, proeject_id, etc)
///
/// \param completion result of payment flow
///
- (void)presentPaymentAt:(UIViewController * _Nonnull)viewController paymentOptions:(PaymentOptions * _Nonnull)paymentOptions completionHandler:(void (^ _Nullable)(PaymentResult * _Nonnull))completion;
@end


typedef SWIFT_ENUM(NSInteger, MockModeType, open) {
  MockModeTypeDisabled = 0,
  MockModeTypeSuccess = 1,
  MockModeTypeDecline = 2,
};

@class PaymentAccount;

SWIFT_CLASS("_TtC11flashpaySDK7Payment")
@interface Payment : NSObject
@property (nonatomic, copy) NSString * _Nullable status;
@property (nonatomic, copy) NSString * _Nullable type;
@property (nonatomic, copy) NSString * _Nullable id;
@property (nonatomic, copy) NSString * _Nullable date;
@property (nonatomic, copy) NSString * _Nullable method;
@property (nonatomic) int64_t sum;
@property (nonatomic, copy) NSString * _Nullable currency;
@property (nonatomic, copy) NSString * _Nullable token;
@property (nonatomic, strong) PaymentAccount * _Nullable account;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC11flashpaySDK14PaymentAccount")
@interface PaymentAccount : NSObject
@property (nonatomic, copy) NSString * _Nullable number;
@property (nonatomic, copy) NSString * _Nullable type;
@property (nonatomic, copy) NSString * _Nullable cardHolder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum PaymentErrorCode : NSInteger;

SWIFT_CLASS("_TtC11flashpaySDK12PaymentError")
@interface PaymentError : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull codeString;
@property (nonatomic, readonly) enum PaymentErrorCode code;
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, PaymentErrorCode, open) {
  PaymentErrorCodeServerUnauthorized = 0,
  PaymentErrorCodeServerMethodNotFound = 1,
  PaymentErrorCodeServerApiError = 2,
  PaymentErrorCodeServerContentParsingError = 3,
  PaymentErrorCodeNetworkError = 4,
  PaymentErrorCodeNetworkIsNotAvailable = 5,
  PaymentErrorCodeNetworkTimeout = 6,
  PaymentErrorCodePaymentRequestTypeNotExist = 7,
  PaymentErrorCodePaymentMethodNotAvailable = 8,
  PaymentErrorCodePaymentAlreadyExist = 9,
  PaymentErrorCodePaymentHasFinalStatus = 10,
  PaymentErrorCodePaymentNotFound = 11,
  PaymentErrorCodePaymentTokenNotExist = 12,
  PaymentErrorCodeCustomerIdNotExist = 13,
  PaymentErrorCodeClarificationFieldsError = 14,
  PaymentErrorCodeSessionNotInitialized = 15,
  PaymentErrorCodeIllegalArguments = 16,
  PaymentErrorCodeIllegalState = 17,
  PaymentErrorCodeUnknown = 18,
};



@class PaymentOptionsForApplePay;
@class NSNumber;
@class UIImage;
@class UIColor;
enum ActionType : NSInteger;
@class RecurrentInfo;
@class RecipientInfo;
@class ThreeDSecureInfo;
enum ScreenDisplayMode : NSInteger;

SWIFT_CLASS("_TtC11flashpaySDK14PaymentOptions")
@interface PaymentOptions : NSObject
@property (nonatomic, strong) PaymentOptionsForApplePay * _Nullable applePayOptions;
@property (nonatomic, strong) NSNumber * _Nullable storedCardType;
/// Payment logo image
@property (nonatomic, strong) UIImage * _Nullable footerImage;
/// Payment logo image
@property (nonatomic, strong) UIImage * _Nullable logoImage;
/// Brand color
@property (nonatomic, strong) UIColor * _Nullable brandColor;
/// Dark theme mode
@property (nonatomic) BOOL isDarkThemeOn;
/// mock Mode type
@property (nonatomic) enum MockModeType mockModeType;
/// Action of payment, by default its Sale
@property (nonatomic) enum ActionType action;
/// Object that holds recurrent info
/// If set, would treat payment as recurrent
@property (nonatomic, strong) RecurrentInfo * _Nullable recurrentInfo;
/// If you know any data for fields what would be asked from a user
/// you could set them and they would be pre-filled
/// Fields that are known, if visible -> would be pre-filled
@property (nonatomic, copy) NSArray<AdditionalField *> * _Nullable additionalFields;
/// Receipt data base64
@property (nonatomic, copy) NSString * _Nullable receiptData;
/// The reference to an instance of Recipient Info data class should be assagned for auth actions with support FT amd F52 fundings
@property (nonatomic, strong) RecipientInfo * _Nullable recipientInfo;
/// Hide saved wallets
@property (nonatomic) BOOL hideSavedWallets;
/// Hide card scanning button
@property (nonatomic) BOOL hideScanningCards;
/// language code
@property (nonatomic, copy) NSString * _Nullable languageCode;
- (void)setThreeDSecureInfo:(ThreeDSecureInfo * _Nullable)threeDSecureInfo;
- (void)addScreenDisplayMode:(enum ScreenDisplayMode)mode;
/// Init Payment Info with some additional params
/// \param projectID Unique identifier of your project
///
/// \param paymentID Unique identifier of the payment in your project
///
/// \param paymentAmount Payment amount in minor units of currency, 1999 means 19.99, 10 means 0.10
///
/// \param paymentCurrency Payment currency in ISO 4217 alpha-3 format
///
/// \param paymentDescription Payment description, for example, T-Shirt with print
///
/// \param customerID Unique identifier of the customer in your project
///
/// \param regionCode Region code of a customer
///
/// \param token Saved card token
///
- (nonnull instancetype)initWithProjectID:(int32_t)projectID paymentID:(NSString * _Nonnull)paymentID paymentAmount:(int64_t)paymentAmount paymentCurrency:(NSString * _Nonnull)paymentCurrency paymentDescription:(NSString * _Nullable)paymentDescription customerID:(NSString * _Nullable)customerID regionCode:(NSString * _Nullable)regionCode token:(NSString * _Nullable)token storedCardType:(NSNumber * _Nullable)storedCardType OBJC_DESIGNATED_INITIALIZER;
/// Init Payment Info with only required params
/// \param projectID Unique identifier of your project
///
/// \param paymentID Unique identifier of the payment in your project
///
/// \param paymentAmount Payment amount in minor units of currency, 1999 means 19.99, 10 means 0.10
///
/// \param paymentCurrency Payment currency in ISO 4217 alpha-3 format
///
- (nonnull instancetype)initWithProjectID:(int32_t)projectID paymentID:(NSString * _Nonnull)paymentID paymentAmount:(int64_t)paymentAmount paymentCurrency:(NSString * _Nonnull)paymentCurrency storedCardType:(NSNumber * _Nullable)storedCardType OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, copy) NSString * _Nullable signature;
@property (nonatomic, copy) NSString * _Nullable forcePaymentMethod;
@property (nonatomic, readonly, copy) NSString * _Nonnull paramsForSignature;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class PKPaymentRequest;

SWIFT_CLASS_NAMED("ApplePayOptions")
@interface PaymentOptionsForApplePay : NSObject
/// Initialise with fields:
/// <ul>
///   <li>
///     <em>applePayMerchantID</em> - required parameter:
///   </li>
///   <li>
///     <em>countryCode</em> - The merchant’s ISO country code. It is required parameter:
///   </li>
///   <li>
///     <em>applePayDescription</em>  Optional. PaymentID will be used as description of payment if not provided
///   </li>
/// </ul>
- (nonnull instancetype)initWithApplePayMerchantID:(NSString * _Nullable)applePayMerchantID applePayDescription:(NSString * _Nullable)applePayDescription countryCode:(NSString * _Nullable)countryCode OBJC_DESIGNATED_INITIALIZER;
/// Initialise with pre-filed PKPaymentRequest
- (nonnull instancetype)initWithPaymentRequest:(PKPaymentRequest * _Nullable)paymentRequest OBJC_DESIGNATED_INITIALIZER;
/// Initialise with fields:
/// <ul>
///   <li>
///     <em>applePayMerchantID</em> - required parameter:
///   </li>
///   <li>
///     <em>countryCode</em> - The merchant’s ISO country code. It is required parameter:
///   </li>
///   <li>
///     <em>applePayDescription</em>  Optional. PaymentID will be used as description of payment if not provided
///   </li>
///   <li>
///     <em>paymentRequest</em>  Optional.  pre-filed PKPaymentRequest
///   </li>
/// </ul>
- (nonnull instancetype)initWithApplePayMerchantID:(NSString * _Nullable)applePayMerchantID applePayDescription:(NSString * _Nullable)applePayDescription countryCode:(NSString * _Nullable)countryCode paymentRequest:(PKPaymentRequest * _Nullable)paymentRequest OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, ActionType, open) {
  ActionTypeSale = 1,
  ActionTypeAuth = 2,
  ActionTypeTokenize = 3,
  ActionTypeVerify = 4,
};


enum PaymentStatus : NSInteger;

SWIFT_CLASS("_TtC11flashpaySDK13PaymentResult")
@interface PaymentResult : NSObject
@property (nonatomic, readonly) enum PaymentStatus status;
@property (nonatomic, readonly, strong) PaymentError * _Nullable error;
@property (nonatomic, readonly, strong) Payment * _Nullable payment;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, PaymentStatus, open) {
  PaymentStatusSuccess = 0,
  PaymentStatusDecline = 100,
  PaymentStatusCancelled = 200,
  PaymentStatusError = 500,
};



/// This data class represents additional info requered for ApplePay auth with support FT and F52 fundings
SWIFT_CLASS("_TtC11flashpaySDK13RecipientInfo")
@interface RecipientInfo : NSObject
/// Wallet ID for replenishment. Field is mandatory for MasterCard.
@property (nonatomic, copy) NSString * _Nullable walletId;
/// The owner of the replenished wallet. Always mandatory field.
@property (nonatomic, copy) NSString * _Nullable walletOwner;
/// Recipient card number
@property (nonatomic, copy) NSString * _Nullable pan;
/// Recipient card holder
@property (nonatomic, copy) NSString * _Nullable cardHolder;
/// Country of recipient (wallet owner). Field is mandatory for MasterCard.
@property (nonatomic, copy) NSString * _Nullable country;
/// Recipient state/province
@property (nonatomic, copy) NSString * _Nullable stateCode;
/// Recipient city
@property (nonatomic, copy) NSString * _Nullable city;
/// Recipient address
@property (nonatomic, copy) NSString * _Nullable address;
/// Init Recipient Info
/// \param walletId Wallet ID for replenishment. Optional.
///
/// \param walletOwner The owner of the replenished wallet. Optional.
///
/// \param pan Recipient card number. Optional.
///
/// \param cardHolder Recipient card holder. Optional.
///
/// \param country Country of recipient (wallet owner). Optional.
///
/// \param stateCode State/province of recipient. Optional.
///
/// \param city City of recipient. Optional.
///
/// \param address Address of recipient. Optional.
///
- (nonnull instancetype)initWithWalletId:(NSString * _Nullable)walletId walletOwner:(NSString * _Nullable)walletOwner pan:(NSString * _Nullable)pan cardHolder:(NSString * _Nullable)cardHolder country:(NSString * _Nullable)country stateCode:(NSString * _Nullable)stateCode city:(NSString * _Nullable)city address:(NSString * _Nullable)address OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


enum RecurrentType : NSInteger;
enum RecurrentPeriod : NSInteger;
@class RecurrentInfoSchedule;

SWIFT_CLASS("_TtC11flashpaySDK13RecurrentInfo")
@interface RecurrentInfo : NSObject
/// Init Recurrent Info with all params
/// \param register Indicate if needed to be registered for recurrent
///
/// \param type Type of recurrent - R/C/U/I
///
/// \param expiryDay Day of recurrent expiration, must be string(2) month in DD format
///
/// \param expiryMonth Month of recurrent expiration, must be string(2) month in MM format
///
/// \param expiryYear Year of recurrent expiration, must be string(4) month in YYYY format.
///
/// \param period Period of payment - Day/Week/Month/Quarter/Year
///
/// \param interval Number of periods in an interval between payments - Int(1-100)
///
/// \param time Time of recurrent payment to charge
///
/// \param startDate Date to start recurrent payment, must be string(10) in DD-MM-YYYY format
///
/// \param scheduledPaymentID Recurring payment ID
///
- (nonnull instancetype)initWithRecurrentType:(BOOL)register_ register:(enum RecurrentType)type expiryDay:(NSString * _Nonnull)expiryDay expiryMonth:(NSString * _Nonnull)expiryMonth expiryYear:(NSString * _Nonnull)expiryYear period:(enum RecurrentPeriod)period interval:(NSInteger)interval time:(NSString * _Nonnull)time startDate:(NSString * _Nonnull)startDate scheduledPaymentID:(NSString * _Nonnull)scheduledPaymentID OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithRecurrentType:(enum RecurrentType)type OBJC_DESIGNATED_INITIALIZER;
- (void)setAmount:(NSInteger)amount;
- (void)setSchedule:(NSArray<RecurrentInfoSchedule *> * _Nonnull)schedule;
/// Represent Object in Dictionary  [String : Any]
///
/// returns:
/// Dictionary representation
- (NSDictionary<NSString *, id> * _Nullable)dictionaryRepresentation SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC11flashpaySDK21RecurrentInfoSchedule")
@interface RecurrentInfoSchedule : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull date;
@property (nonatomic, readonly) NSInteger amount;
- (nonnull instancetype)initWithDate:(NSString * _Nonnull)date amount:(NSInteger)amount OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, RecurrentPeriod, open) {
  RecurrentPeriodDay = 0,
  RecurrentPeriodWeek = 1,
  RecurrentPeriodMonth = 2,
  RecurrentPeriodQuarter = 3,
  RecurrentPeriodYear = 4,
};

typedef SWIFT_ENUM(NSInteger, RecurrentType, open) {
  RecurrentTypeRegular = 0,
  RecurrentTypeOneClick = 1,
  RecurrentTypeAutopayment = 2,
};


typedef SWIFT_ENUM(NSInteger, ScreenDisplayMode, open) {
  ScreenDisplayModeHideSuccessFinalPage = 1,
  ScreenDisplayModeHideDeclineFinalPage = 2,
};



SWIFT_CLASS("_TtC11flashpaySDK23ThreeDSecureAccountInfo")
@interface ThreeDSecureAccountInfo : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)setAdditional:(NSString * _Nonnull)additional;
- (void)setAgeIndicator:(NSString * _Nonnull)ageIndicator;
- (void)setDate:(NSString * _Nonnull)date;
- (void)setChangeIndicator:(NSString * _Nonnull)changeIndicator;
- (void)setChangeDate:(NSString * _Nonnull)changeDate;
- (void)setPassChangeIndicator:(NSString * _Nonnull)passChangeIndicator;
- (void)setPassChangeDate:(NSString * _Nonnull)passChangeDate;
- (void)setPurchaseNumber:(NSInteger)purchaseNumber;
- (void)setProvisionAttempts:(NSInteger)provisionAttempts;
- (void)setActivityDay:(NSInteger)activityDay;
- (void)setActivityYear:(NSInteger)activityYear;
- (void)setPaymentAgeIndicator:(NSString * _Nonnull)paymentAgeIndicator;
- (void)setPaymentAge:(NSString * _Nonnull)paymentAge;
- (void)setSuspiciousActivity:(NSString * _Nonnull)suspiciousActivity;
- (void)setAuthMethod:(NSString * _Nonnull)authMethod;
- (void)setAuthTime:(NSString * _Nonnull)authTime;
- (void)setAuthData:(NSString * _Nonnull)authData;
@end

@class ThreeDSecureShippingInfo;
@class ThreeDSecureMpiResultInfo;

SWIFT_CLASS("_TtC11flashpaySDK24ThreeDSecureCustomerInfo")
@interface ThreeDSecureCustomerInfo : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)setAddressMatch:(NSString * _Nonnull)addressMatch;
- (void)setHomePhone:(NSString * _Nonnull)homePhone;
- (void)setWorkPhone:(NSString * _Nonnull)workPhone;
- (void)setBillingRegionCode:(NSString * _Nonnull)billingRegionCode;
- (void)setAccountInfo:(ThreeDSecureAccountInfo * _Nonnull)accountInfo;
- (void)setShippingInfo:(ThreeDSecureShippingInfo * _Nonnull)shippingInfo;
- (void)setMpiResultInfo:(ThreeDSecureMpiResultInfo * _Nonnull)mpiResultInfo;
@end


SWIFT_CLASS("_TtC11flashpaySDK24ThreeDSecureGiftCardInfo")
@interface ThreeDSecureGiftCardInfo : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)setAmount:(NSInteger)amount;
- (void)setCurrency:(NSString * _Nonnull)currency;
- (void)setCount:(NSInteger)count;
@end

@class ThreeDSecurePaymentInfo;

SWIFT_CLASS("_TtC11flashpaySDK16ThreeDSecureInfo")
@interface ThreeDSecureInfo : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)setThreeDSecurePaymentInfo:(ThreeDSecurePaymentInfo * _Nonnull)threeDSecurePaymentInfo;
- (void)setThreeDSecureCustomerInfo:(ThreeDSecureCustomerInfo * _Nonnull)threeDSecureCustomerInfo;
@end



SWIFT_CLASS("_TtC11flashpaySDK25ThreeDSecureMpiResultInfo")
@interface ThreeDSecureMpiResultInfo : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)setAcsOperationId:(NSString * _Nonnull)acsOperationId;
- (void)setAuthenticationFlow:(NSString * _Nonnull)authenticationFlow;
- (void)setAuthenticationTimestamp:(NSString * _Nonnull)authenticationTimestamp;
@end



SWIFT_CLASS("_TtC11flashpaySDK23ThreeDSecurePaymentInfo")
@interface ThreeDSecurePaymentInfo : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)setReorder:(NSString * _Nonnull)reorder;
- (void)setPreorderPurchase:(NSString * _Nonnull)preorderPurchase;
- (void)setPreorderDate:(NSString * _Nonnull)preorderDate;
- (void)setChallengeIndicator:(NSString * _Nonnull)challengeIndicator;
- (void)setChallengeWindow:(NSString * _Nonnull)challengeWindow;
- (void)setGiftCard:(ThreeDSecureGiftCardInfo * _Nonnull)giftCard;
@end


SWIFT_CLASS("_TtC11flashpaySDK24ThreeDSecureShippingInfo")
@interface ThreeDSecureShippingInfo : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)setType:(NSString * _Nonnull)type;
- (void)setDeliveryTime:(NSString * _Nonnull)deliveryTime;
- (void)setDeliveryEmail:(NSString * _Nonnull)deliveryEmail;
- (void)setAddressUsageIndicator:(NSString * _Nonnull)addressUsageIndicator;
- (void)setAddressUsage:(NSString * _Nonnull)addressUsage;
- (void)setCity:(NSString * _Nonnull)city;
- (void)setCountry:(NSString * _Nonnull)country;
- (void)setAddress:(NSString * _Nonnull)address;
- (void)setPostal:(NSString * _Nonnull)postal;
- (void)setRegionCode:(NSString * _Nonnull)regionCode;
- (void)setNameIndicator:(NSString * _Nonnull)nameIndicator;
@end



#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
